buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    // Add required dependencies here if needed
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = JavaVersion.VERSION_22

  // Ensure files are writable before deletion
  tasks.withType(Delete).configureEach {
    doFirst {
      println "Releasing file locks before deletion..."
      try {
        file("${project.buildDir}").eachFileRecurse { file ->
          file.setWritable(true)
        }
      } catch (Exception e) {
        println "Warning: Could not release some file locks, continuing..."
      }
    }
  }

  // Task to automatically generate an asset list from the "assets" folder
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    File assetsFolder = new File("${project.rootDir}/assets/")
    File assetsFile = new File(assetsFolder, "assets.txt")

    // Ensure old file is deleted before generating a new one
    assetsFile.delete()

    // Collect and append asset file paths
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

subprojects {
  version = "$projectVersion"
  ext.appName = 'FreeFlowLibGDX'

  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'FreeFlowLibGDX' + '-parent'

// Force clean task to handle locked files before deletion
tasks.register('forceClean', Delete) {
    delete fileTree(dir: "${rootProject.buildDir}") {
        exclude '**/.lock'  // Avoid deleting lock files causing issues
    }
    doLast {
        println "Build directory cleaned successfully."
    }
}

// Custom clean task that ensures deletion before building
tasks.register('safeClean') {
    dependsOn 'forceClean'
    doLast {
        println "Safe clean executed before building."
    }
}
